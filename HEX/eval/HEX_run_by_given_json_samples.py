# save as make_team_image.py
from PIL import Image
import json
import matplotlib.pyplot as plt
import numpy as np
import os
from matplotlib.patches import Patch
import time
from tqdm import tqdm
from parser_helper import is_equiv, remove_boxed, last_boxed_only_string
from collections import Counter, defaultdict

# def get_all_file_paths(folder_path, dataset_type, exclude_list = [256]): #error.
#         file_paths = []
#         for root, dirs, files in os.walk(folder_path):
#             for file in files:
#                 if dataset_type in file:
#                     if exclude_list :
#                         for num in exclude_list:
#                             if f'block{num}' not in os.path.join(root, file):
#                                 file_paths.append(os.path.join(root, file))
#                     else:
#                         file_paths.append(os.path.join(root, file))
#         return file_paths

# def get_all_file_paths_2(folder_path, dataset_type, include_str_list = [], exclude_str_list = []):
#         file_paths = []
#         for root, dirs, files in os.walk(folder_path):
#             for file in files:
#                 if dataset_type in file:
#                     if include_str_list :
#                         for string in include_str_list:
#                             if string in os.path.join(root, file):
#                                 file_paths.append(os.path.join(root, file))
#                     else:
#                         file_paths.append(os.path.join(root, file))
#         return file_paths

# import os

def get_all_file_paths_2(folder_path, dataset_type,
                         include_str_list=None, exclude_str_list=None):
    if include_str_list is None:
        include_str_list = []
    if exclude_str_list is None:
        exclude_str_list = []

    file_paths = []
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            if dataset_type in file:
                full_path = os.path.join(root, file)

                # üîπ exclude Î¨∏ÏûêÏó¥Ïù¥ ÌïòÎÇòÎùºÎèÑ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎ©¥ skip
                if exclude_str_list and any(ex in full_path for ex in exclude_str_list):
                    continue

                if include_str_list:
                    if any(inc in full_path for inc in include_str_list):
                        file_paths.append(full_path)
                
                else:
                    file_paths.append(full_path)

    return file_paths




def gsm_extract_ans_from_generation(out_nl):
    import re
    parsed_answer = None
    boxed_matches = re.findall(r"\\boxed{(.*?)}", out_nl)
    if boxed_matches:
        for boxed_content in boxed_matches:
            boxed_content = boxed_content.strip()
            if boxed_content and boxed_content != "..." and not re.match(r"^\.+$", boxed_content):
                try:
                    parsed_answer = float(boxed_content)
                    break
                except ValueError:
                    numbers = re.findall(r"-?\d+\.?\d*", boxed_content)
                    if numbers:
                        try:
                            parsed_answer = float(numbers[0])
                            break
                        except ValueError:
                            pass
    if parsed_answer is None:
        answer_match = re.search(r"<answer>(.*?)</answer>", out_nl, re.DOTALL)
        if answer_match:
            answer_text = answer_match.group(1).strip()
            if answer_text:
                try:
                    parsed_answer = float(answer_text)
                except ValueError:
                    numbers = re.findall(r"-?\d+\.?\d*", answer_text)
                    if numbers:
                        try:
                            parsed_answer = float(numbers[-1])
                        except ValueError:
                            pass
    return parsed_answer

def parse_math_answers(raw_generation):
    parsed_answer = None
    try:
        parsed_answer = remove_boxed(last_boxed_only_string(raw_generation))
    except:
        parsed_answer = None

    if not parsed_answer:
        answer_match = re.search(r"<answer>(.*?)</answer>", raw_generation, re.DOTALL)
        if answer_match:
            parsed_answer = answer_match.group(1).strip()
    return parsed_answer

def parse_countdown_answers(output_nl_each_strategy):
    
    def validate_equation(equation_str, available_numbers):
        """Validate that equation only uses available numbers and each number once."""
        try:
            numbers_in_eq = [int(n) for n in re.findall(r"\d+", equation_str)]
            available_numbers = sorted(available_numbers)
            numbers_in_eq = sorted(numbers_in_eq)
            return numbers_in_eq == available_numbers
        except:
            return False

    def evaluate_equation(equation_str):
        """Safely evaluate the arithmetic equation."""
        try:
            allowed_pattern = r"^[\d+\-*/().\s]+$"
            if not re.match(allowed_pattern, equation_str):
                raise ValueError("Invalid characters in equation.")
            result = eval(equation_str.strip(), {"__builtins__": None}, {})
            return result
        except Exception:
            return float("Inf")

    
    generated_text = output_nl_each_strategy
    equation = ""
    try:
        equation = remove_boxed(last_boxed_only_string(generated_text))
    except:
        # Try to extract from answer tags
        answer_match = re.search(r"<answer>(.*?)</answer>", generated_text, re.DOTALL)
        if answer_match:
            equation = answer_match.group(1).strip()
        else:
            equation = generated_text

    # Replace LaTeX operators with Python operators
    equation = equation.replace(r"\div", "/").replace(r"\times", "*").replace(r"\cdot", "*")
    return equation

def evaluate_countdown(voted_answer, ground_truth):
    
    def validate_equation(equation_str, available_numbers):
        """Validate that equation only uses available numbers and each number once."""
        try:
            numbers_in_eq = [int(n) for n in re.findall(r"\d+", equation_str)]
            available_numbers = sorted(available_numbers)
            numbers_in_eq = sorted(numbers_in_eq)
            return numbers_in_eq == available_numbers
        except:
            return False

    def evaluate_equation(equation_str):
        """Safely evaluate the arithmetic equation."""
        try:
            allowed_pattern = r"^[\d+\-*/().\s]+$"
            if not re.match(allowed_pattern, equation_str):
                raise ValueError("Invalid characters in equation.")
            result = eval(equation_str.strip(), {"__builtins__": None}, {})
            return result
        except Exception:
            return float("Inf")
    # Extract available numbers and target from ground_truth
    numbers = []
    target = None

    if isinstance(ground_truth, list) and len(ground_truth) == 2:
        numbers = ground_truth[0]
        target = ground_truth[1]
    else:
        # Fallback to parsing from question if ground_truth is not in expected format
        numbers_match = re.search(r"Numbers: \[([\d, ]+)\]", question, re.IGNORECASE)
        if numbers_match:
            numbers_str = numbers_match.group(1)
            numbers = [int(num.strip()) for num in numbers_str.split(",")]

        target_match = re.search(r"Target: (\d+)", question, re.IGNORECASE)
        if target_match:
            target = int(target_match.group(1))
    ######################
    # Check for equation with equals sign and extract only the expression part
    equation = voted_answer
    equation_match = re.search(r"([0-9+\-*/() ]+)=[0-9. ]+", equation)
    if equation_match:
        equation = equation_match.group(1).strip()

    is_correct = False
    result = None

    # Validate and evaluate the equation
    is_valid = validate_equation(equation, numbers)
    if is_valid:
        result = evaluate_equation(equation)
        if target is not None and abs(result - target) < 1e-5:
            is_correct = True
            
    return is_correct


def parse_sudoku_answers(question, output_nl):

    question = question
    raw_generation = output_nl

    # Extract puzzle
    puzzle_str = ""
    if len(question) >= 16 and all(c.isdigit() or c == "0" for c in question[:16]):
        puzzle_str = question[:16]
    else:
        match = re.search(r"Sudoku puzzle: ([0-9]{16})", question)
        if match:
            puzzle_str = match.group(1)
    assert len(puzzle_str) == 16, f"Invalid puzzle string: {puzzle_str}"

    empty_indices = [i for i in range(16) if puzzle_str[i] == "0"]
    empty_cells = len(empty_indices)

    # Extract solution using regex patterns
    solution_str = ""
    patterns = [
        r"<answer>.*?```\s*([\d\s]+)```",
        r"<answer>(.*?)(?:<\|eot_id\|>|<\|endoftext\|>|</answer>)",
        r"</answer>\s*(.*?)(?:<\|eot_id\|>|<\|endoftext\|>|$)",
        r".*?(\d{16})\s*</answer>",
        r"\b(\d{16})\b",
    ]

    for pattern in patterns:
        if solution_str:
            break
        match = re.search(pattern, raw_generation, re.DOTALL)
        if match and match.group(1).strip():
            solution_str = match.group(1).strip()

    solution_str = re.sub(r"\s", "", solution_str)
    return solution_str

def evaluate_sudoku_answers(extracted_answer, question, ground_truth):

    # Extract puzzle
    puzzle_str = ""
    if len(question) >= 16 and all(c.isdigit() or c == "0" for c in question[:16]):
        puzzle_str = question[:16]
    else:
        match = re.search(r"Sudoku puzzle: ([0-9]{16})", question)
        if match:
            puzzle_str = match.group(1)
    assert len(puzzle_str) == 16, f"Invalid puzzle string: {puzzle_str}"

    empty_indices = [i for i in range(16) if puzzle_str[i] == "0"]
    empty_cells = len(empty_indices)
    
    solution_str = extracted_answer

    # Handle solution length
    if not solution_str:
        correct_cells = 0
    else:
        if len(solution_str) < 16:
            solution_str = solution_str + "0" * (16 - len(solution_str))
        elif len(solution_str) > 16:
            solution_str = solution_str[:16]
        correct_cells = sum(1 for i in empty_indices if solution_str[i] == ground_truth[i])

    accuracy = correct_cells / empty_cells if empty_cells > 0 else 0.0
    return correct_cells, empty_cells # A,B  Îß§ ÏÉùÏÑ±ÎßàÎã§, A,BÎ•º Í∞ÅÍ∞Å ÎàÑÏ†ÅÏãúÌÇ§Í≥† ÎπÑÏú®ÏùÑ ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú Íµ¨Ìï¥ÏïºÌï® 
    


def parse_arcc_answers(json_path=None, json_data=None):
    """
    Parse ARC-c style multiple-choice answers from generations.
    Extracts a single choice among {'A','B','C','D'} from model output.

    Expects input JSON with a top-level key "generations", where each item may have:
      - "question": str
      - "ground_truth": str  # expected to be 'A'/'B'/'C'/'D' (case-insensitive)
      - "generations": str   # model's raw output

    Relies on external helpers if available:
      - count_effective_tokens(text)
      - is_equiv(pred, gold)  # optional; if unavailable, falls back to strict equality

    Returns:
      (total_correct, total_processed, processed_items, total_effective_tokens)
    """
    if json_path:
        with open(json_path, "r") as f:
            data = json.load(f)
    else:
        data = json_data

    total_correct = 0
    total_processed = 0
    total_effective_tokens = 0
    processed_items = []

    def norm_choice(s):
        if not s:
            return None
        s = s.strip().upper()
        # Strip common trailing punctuation
        s = re.sub(r'[)\].,;:>\s]+$', '', s)
        # Strip leading punctuation
        s = re.sub(r'^[<\[(\s*]+', '', s)
        return s if s in {"A", "B", "C", "D"} else None

    def last_match(groups):
        """Return the last non-empty normalized ABCD from a list of regex matches (tuples or strings)."""
        candidate = None
        for g in groups:
            if isinstance(g, tuple):
                for part in g[::-1]:
                    cand = norm_choice(part)
                    if cand:
                        candidate = cand
                        break
            else:
                cand = norm_choice(g)
                if cand:
                    candidate = cand
        return candidate

    def extract_choice_letter(text):
        """
        Try multiple increasingly permissive patterns; prefer the LAST occurrence found.
        """
        if not text:
            return None

        # 1) Explicit XML-ish tag
        m = list(re.finditer(r"<answer>\s*([ABCD])\s*</answer>", text, flags=re.IGNORECASE|re.DOTALL))
        if m:
            return norm_choice(m[-1].group(1))

        # 2) Boxed answers like \boxed{C} or \fbox{B}
        m = list(re.finditer(r"\\(?:boxed|fbox)\s*\{\s*([ABCD])\s*\}", text, flags=re.IGNORECASE))
        if m:
            return norm_choice(m[-1].group(1))

        # # 3) Phrases: "Answer: C", "Correct answer is B", "Ï†ïÎãµÏùÄ C", "Îãµ: D"
        # m = list(re.finditer(
        #     r"(?:(?:final|correct)?\s*answer|ans\.?|Ï†ïÎãµ|Îãµ)\s*[:\-‚Äì]?\s*([ABCD])\b",
        #     text, flags=re.IGNORECASE))
        # if m:
        #     return norm_choice(m[-1].group(1))

        # 4) Words: option/choice (ÏòÅÎ¨∏)
        m = list(re.finditer(r"(?:option|choice)\s*[:\-‚Äì]?\s*([ABCD])\b", text, flags=re.IGNORECASE))
        if m:
            return norm_choice(m[-1].group(1))

        # 5) Parenthesized or bracketed forms like (A), [B], <C>, **D**
        m = list(re.finditer(r"[\(\[\<]\s*([ABCD])\s*[\)\]\>]", text, flags=re.IGNORECASE))
        if m:
            return norm_choice(m[-1].group(1))

        # # 6) Standalone letter at end of line/sentence with light punctuation, preceded by cue words
        # m = list(re.finditer(
        #     r"(?:is|thus|therefore|so|Í≤∞Î°†Ï†ÅÏúºÎ°ú|Îî∞ÎùºÏÑú|Ï¶â)\s+([ABCD])\s*[.)]?(?:\s|$)",
        #     text, flags=re.IGNORECASE))
        # if m:
        #     return norm_choice(m[-1].group(1))

        # 7) Bold/markdown emphasis like **A** or *B*
        m = list(re.finditer(r"\*\*\s*([ABCD])\s*\*\*|\*\s*([ABCD])\s*\*", text, flags=re.IGNORECASE))
        if m:
            # find any capturing group with content
            for match in m[::-1]:
                g = match.group(1) or match.group(2)
                cand = norm_choice(g)
                if cand:
                    return cand

        # 8) Very permissive: last solitary A-D token on its own line or before EOL
        # (avoid swallowing letters inside words)
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        for ln in reversed(lines):
            # prioritize patterns like "=> C", "= C", "-> C"
            m = re.search(r"(?:=>|->|=|:)\s*([ABCD])\s*$", ln, flags=re.IGNORECASE)
            if m:
                cand = norm_choice(m.group(1)); 
                if cand: 
                    return cand
            # then a bare token at line end
            m = re.search(r"\b([ABCD])\b[.)]?\s*$", ln, flags=re.IGNORECASE)
            if m:
                cand = norm_choice(m.group(1))
                if cand:
                    return cand

        return None

        # Note: if you already have helpers like last_boxed_only_string/remove_boxed,
        # you can optionally call them before/after the patterns above.

    for item in data.get("generations", []):
        total_processed += 1
        question = item.get("question", "")
        ground_truth = item.get("ground_truth", "")
        raw_generation = item.get("generations", "")

        # Count effective tokens (external helper assumed to exist)
        try:
            effective_tokens = count_effective_tokens(raw_generation)
        except NameError:
            # Fallback if helper is unavailable
            effective_tokens = len(raw_generation.split())
        total_effective_tokens += effective_tokens

        # Try extraction
        parsed_answer = extract_choice_letter(raw_generation)

        # Also allow <answer>...</answer> fallback if it contained full text before
        if parsed_answer is None:
            m = re.search(r"<answer>(.*?)</answer>", raw_generation, re.DOTALL|re.IGNORECASE)
            if m:
                parsed_answer = norm_choice(m.group(1))

        # Compare with ground truth
        is_correct = False
        if parsed_answer is not None and ground_truth:
            gt = norm_choice(ground_truth) or ground_truth.strip().upper()
            try:
                is_correct = is_equiv(parsed_answer, gt)  # external helper (if provided)
            except NameError:
                is_correct = (parsed_answer == gt)

        if is_correct:
            total_correct += 1

        processed_items.append(
            {
                "question": question,
                "raw_generation": raw_generation,
                "extracted_answer": parsed_answer,  # 'A'/'B'/'C'/'D' or None
                "ground_truth": ground_truth,
                "is_correct": is_correct,
                "effective_tokens": effective_tokens,
            }
        )

    return (
        total_correct,
        total_processed,
        processed_items,
        total_effective_tokens,
    )





################################
from collections import Counter
def most_frequent_element(data):
    counter = Counter(data)
    return counter.most_common(1)[0][0]

def most_frequent_element_2(data):
    counter = Counter(data)
    most_common = counter.most_common()
    top_elem, top_count = most_common[0]

    # ÏµúÎπàÍ∞íÏù¥ Ïó¨Îü¨ Í∞úÏù∏ÏßÄ ÌôïÏù∏
    is_tied = sum(1 for _, count in most_common if count == top_count) > 1
    
    return top_elem, is_tied

import random
from collections import Counter
import itertools
def most_frequent_element_3(data):
    counter = Counter(data)
    most_common = counter.most_common()
    top_count = most_common[0][1]

    # ÏµúÎπàÍ∞í ÌõÑÎ≥¥Îì§Îßå Î™®ÏúºÍ∏∞
    candidates = [elem for elem, count in most_common if count == top_count]

    # ÎèôÎ•† Ïó¨Î∂Ä
    is_tied = len(candidates) > 1

    # ÎèôÎ•†Ïù¥Î©¥ ÎûúÎç§ ÏÑ†ÌÉù, ÏïÑÎãàÎ©¥ Í∑∏ÎåÄÎ°ú Î∞òÌôò
    chosen = random.choice(candidates)

    return chosen, is_tied
def most_frequent_element_4(data):
    counter = Counter(data)
    most_common = counter.most_common()
    top_count = most_common[0][1]

    # ÏµúÎπàÍ∞í ÌõÑÎ≥¥Îì§Îßå Î™®ÏúºÍ∏∞
    candidates = [elem for elem, count in most_common if count == top_count]

    # ÎèôÎ•† Ïó¨Î∂Ä
    is_tied = len(candidates) > 1

    # ÎèôÎ•†Ïù¥Î©¥ ÎûúÎç§ ÏÑ†ÌÉù, ÏïÑÎãàÎ©¥ Í∑∏ÎåÄÎ°ú Î∞òÌôò
    chosen = random.choice(candidates)

    avg_distance = None
    if not is_tied and top_count > 1:
        # chosenÏù¥ Îì±Ïû•Ìïú Î™®Îì† ÏúÑÏπò Ïù∏Îç±Ïä§
        positions = [i for i, val in enumerate(data) if val == chosen]
        
        # Î™®Îì† ÏåçÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞
        distances = [abs(i - j) for i, j in itertools.combinations(positions, 2)]
        
        # ÌèâÍ∑† Í±∞Î¶¨
        avg_distance = sum(distances) / len(distances)

    return chosen, is_tied, avg_distance

import statistics


def most_frequent_elements(data):
    counter = Counter(data)
    max_count = max(counter.values())  # Í∞ÄÏû• ÌÅ∞ ÎπàÎèÑ
    most_common = counter.most_common()
    top_count = most_common[0][1]
    is_tied = sum(1 for _, count in most_common if count == top_count) > 1
    return [k for k, v in counter.items() if v == max_count], is_tied

def most_frequent_elements_exclude_None(data):
    data = [(i, -ll, -ll_exclude_AEoT) for i, ll, ll_exclude_AEoT in data if i is not None]

    counter = Counter(data)
    max_count = max(counter.values())  # Í∞ÄÏû• ÌÅ∞ ÎπàÎèÑ
    most_common = counter.most_common()
    top_count = most_common[0][1]
    is_tied = sum(1 for _, count in most_common if count == top_count) > 1
    return [k for k, v in counter.items() if v == max_count], is_tied

def most_low_nll_elements_exclude_None(data, use_ll = 'll'):
    # print(data)
    data = [(i, -ll, -ll_exclude_AEoT) for i, ll, ll_exclude_AEoT in data if i is not None]
    if use_ll == 'll':
        min_ll = min(ll for _, ll, _ in data)
        best_indices = [i for i, ll, _ in data if ll == min_ll]
    elif use_ll == 'll_notAEoT':
        min_ll = min(ll_notEoT for _, _, ll_notEoT in data)
        best_indices = [i for i, _, ll in data if ll == min_ll]
    
    is_tied = len(best_indices) > 1
    return best_indices, is_tied


# def most_frequent_elements_exclude_None_and_tie_lownll(data, selecting_rule='', exclude_None = True):
#     # None Ï†úÍ±∞ Î∞è -ll, -ll_exclude_AEoT Î≥ÄÌôò
    
#     if exclude_None:
#         data = [(i, -ll) for i, ll in data if i is not None]
#     else:
#         data = [(i, -ll) for i, ll in data]

#     if data == []:
#         data = [(None,0)]

#     # data = [(i, -ll, -ll_exclude_AEoT) for i, ll, ll_exclude_AEoT in data]
#     if selecting_rule == 'frequency':
#         # ÎπàÎèÑ ÏÑ∏Í∏∞
#         counter = Counter([i for i, _ in data])
#         max_count = max(counter.values())
#         most_common = counter.most_common()
#         top_count = most_common[0][1]
#         is_tied = sum(1 for _, count in most_common if count == top_count) > 1
#         return [k for k, v in counter.items() if v == max_count], is_tied

#     elif selecting_rule == 'lowest_nll':
#         # ÎπàÎèÑ ÏÑ∏Í∏∞
#         counter = Counter([i for i, _ in data])
#         max_count = max(counter.values())
#         most_common = counter.most_common()
#         top_count = most_common[0][1]
#         is_tied = sum(1 for _, count in most_common if count == top_count) > 1

#         min_ll = min(nll for _, nll in data)
#         best_indices = [i for i, nll in data if nll == min_ll]
#         return best_indices, is_tied

#     elif selecting_rule == 'frequency_tie_lowest_nll':
#         # ÎπàÎèÑ ÏÑ∏Í∏∞
#         counter = Counter([i for i, _ in data])
#         max_count = max(counter.values())
#         most_common = counter.most_common()
#         top_count = most_common[0][1]
#         is_tied = sum(1 for _, count in most_common if count == top_count) > 1
#         # iÎ≥ÑÎ°ú ll Í∞í Ï†ÄÏû•
#         ll_map = defaultdict(list)
#         for i, nll in data:
#             ll_map[i].append(nll)  # ÌïÑÏöîÌïòÎ©¥ ll_exclude_AEoTÎèÑ Í∞ôÏù¥ Ï†ÄÏû• Í∞ÄÎä•
#         # ÏµúÎπàÍ∞í iÏôÄ Í∑∏Ïóê ÎåÄÏùëÌïòÎäî ll Í∞íÎì§ Ï∂îÏ∂ú
#         # result = [(k, ll_map[k]) for k, v in counter.items() if v == max_count]
#         result = [(k, min(ll_map[k])) for k, v in counter.items() if v == max_count]
#         result.sort(key=lambda x: x[1], reverse=False)
#         return [result[0][0]], is_tied


from collections import Counter, defaultdict

def most_frequent_elements_exclude_None_and_tie_lownll(
    data, selecting_rule='', exclude_None=True
):
    """
    data: list of tuples (i, ll) where 'll' is log-likelihood (will be negated to nll)
    Returns:
        (list_of_(value, nll), is_tied_among_frequencies)
    """
    # None Ï†úÍ±∞ Î∞è -ll -> nllÎ°ú Î≥ÄÌôò
    if exclude_None:
        data = [(i, -ll) for i, ll in data if i is not None]
    else:
        data = [(i, -ll) for i, ll in data]

    if not data:
        return [(None, 0)], False

    # Í≥µÌÜµ Ï§ÄÎπÑÎ¨º: ÎπàÎèÑ Í≥ÑÏÇ∞, ÎèôÎ•† Ïó¨Î∂Ä
    counter = Counter([i for i, _ in data])
    max_count = max(counter.values())
    most_common = counter.most_common()
    top_count = most_common[0][1]
    is_tied = sum(1 for _, count in most_common if count == top_count) > 1

    # Í∞íÎ≥Ñ nll Î¶¨Ïä§Ìä∏/ÏöîÏïΩ
    ll_map = defaultdict(list)
    for i, nll in data:
        ll_map[i].append(nll)

    if selecting_rule == 'frequency':
        # ÏµúÎπàÍ∞íÎì§Ïùò (Í∞í, ÏµúÏÜå nll) Î™®Îëê Î∞òÌôò
        result = [(k, min(ll_map[k])) for k, v in counter.items() if v == max_count]
        return result, is_tied

    elif selecting_rule == 'lowest_nll':
        # Ï†ÑÏó≠ ÏµúÏÜå nllÏùÑ Í∞ñÎäî Í∞í(Îì§) Î∞òÌôò (Ï§ëÎ≥µ Ï†úÍ±∞)
        min_ll = min(nll for _, nll in data)
        best_values = {i for i, nll in data if nll == min_ll}
        result = [(i, min_ll) for i in best_values]
        return result, is_tied

    elif selecting_rule == 'frequency_tie_lowest_nll':
        # ÏµúÎπàÍ∞í ÏßëÌï©ÏóêÏÑú nllÏù¥ Í∞ÄÏû• ÏûëÏùÄ Í∞í(Îì§)Îßå Î∞òÌôò
        top_items = [(k, min(ll_map[k])) for k, v in counter.items() if v == max_count]
        if not top_items:
            return [(None, 0)], is_tied
        min_top_nll = min(nll for _, nll in top_items)
        result = [(k, nll) for k, nll in top_items if nll == min_top_nll]
        return result, is_tied

    else:
        # Í∑úÏπô ÎØ∏ÏßÄÏ†ï: ÏïàÏ†ÑÌïòÍ≤å Ï†ÑÏó≠ ÏµúÏÜå nll Î∞òÌôò
        min_ll = min(nll for _, nll in data)
        best_values = {i for i, nll in data if nll == min_ll}
        result = [(i, min_ll) for i in best_values]
        return result, is_tied










# a = [1,1,2,2,3]
# print(most_frequent_elements(a))  # [1, 2]
# exit()
def mean_std_pm(data):
    # ÌèâÍ∑†
    mean_val = statistics.mean(data)
    # ÌëúÎ≥∏ ÌëúÏ§ÄÌé∏Ï∞® (n-1Î°ú ÎÇòÎàî)
    std_val = statistics.stdev(data)  
    
    # Î≥¥Í∏∞ Ï¢ãÍ≤å Ìè¨Îß∑ÌåÖ (ÏÜåÏàòÏ†ê 3ÏûêÎ¶¨)
    return f"{mean_val:.2f} ¬± {std_val:.2f}"

def common_prefix_length(strings):
    if not strings:
        return 0

    min_len = min(len(s) for s in strings)  # Í∞ÄÏû• ÏßßÏùÄ Î¨∏ÏûêÏó¥ Í∏∏Ïù¥ÍπåÏßÄÎßå ÎπÑÍµê
    prefix_len = 0

    for i in range(min_len):
        # iÎ≤àÏß∏ ÏúÑÏπòÏùò Î™®Îì† Î¨∏ÏûêÏó¥ Î¨∏ÏûêÍ∞Ä Í∞ôÏùÄÏßÄ ÌôïÏù∏
        chars = {s[i] for s in strings}
        if len(chars) == 1:  # Î™®Îëê ÎèôÏùº
            prefix_len += 1
        else:
            break

    return prefix_len


import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch


def is_missing(x):
    # None ÎòêÎäî NaN Î™®Îëê Í≤ÄÏ∂ú
    return x is None or (isinstance(x, float) and math.isnan(x))

def make_answer_grid_from_tuples(
    extracted_list_for_all_datapoints,   # (N, 6) with (pred, score)
    majvoted_list_for_all_datapoints,    # (N, 1) -> [pred]
    gt_list_for_all_datapoints,          # (N,) -> pred or None
    xlabels=("8","16","32","64","128","256","majvote","gt"),
    savepath=None,
    show=True,
    start=0,
    n=None,
    indices=None
):
    N_total = len(extracted_list_for_all_datapoints)
    assert len(majvoted_list_for_all_datapoints) == N_total
    assert len(gt_list_for_all_datapoints) == N_total
    assert all(len(row) == 6 for row in extracted_list_for_all_datapoints)

    # --- ÏÑúÎ∏åÏÖã ÏÑ†ÌÉù ---
    if indices is not None:
        sel = list(indices)
    else:
        if n is None:
            end = N_total
        else:
            end = min(N_total, start + n)
        sel = list(range(start, end))

    # üîé ÎîîÎ≤ÑÍ∑∏ Ï∂úÎ†•: sel ÌÅ¨Í∏∞ÏôÄ Ïïû 20Í∞ú
    print("DEBUG sel:", len(sel), sel[:20])

    if len(sel) == 0:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    # Ìó¨Ìçº
    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    # ÏÑ†ÌÉùÎêú Î∂ÄÎ∂ÑÎßå Ï∂îÏ∂ú
    ext = [extracted_list_for_all_datapoints[i] for i in sel]
    maj = [row[0] if isinstance(row, (list, tuple)) and len(row) > 0 else None
        for row in (majvoted_list_for_all_datapoints[i] for i in sel)]
    gt  = [gt_list_for_all_datapoints[i] for i in sel]

    N = len(sel)
    grid_rgb = np.ones((N, 8, 3), dtype=float)

    white_grid = [1, 1, 1]
    black_grid = [0, 0, 0]
    blue_grid = [0, 0, 1]

    # None ‚Üí Í≤ÄÏ†ï, GTÏó¥ Í∏∞Î≥∏ ÌååÎûë
    for i in range(N):
        for j in range(6):
            pred = get_pred(ext[i][j])
            if pred is None:
                grid_rgb[i, j] = white_grid
        if maj[i] is None:
            grid_rgb[i, 6] = white_grid
        if gt[i] is None:
            grid_rgb[i, 7] = white_grid
        else:
            grid_rgb[i, 7] = blue_grid

    # GTÏôÄ ÎπÑÍµê
    for i in range(N):
        g = gt[i]
        if g is None:
            continue
        for j in range(6):
            pred = get_pred(ext[i][j])
            if pred is None:
                continue
            grid_rgb[i, j] = blue_grid if pred == g else white_grid
        if maj[i] is not None:
            grid_rgb[i, 6] = blue_grid if maj[i] == g else white_grid

    # ÌîåÎ°Ø
    fig_h = max(4, min(16, int(N/40)))
    fig, ax = plt.subplots(figsize=(8, fig_h), dpi=120)
    ax.imshow(grid_rgb, aspect='auto', interpolation='nearest')
    ax.set_xticks(range(8))
    ax.set_xticklabels(xlabels)
    ax.set_yticks([])
    ax.set_xlabel("Methods")
    ax.set_title(f"Answers (rows={N} / total={N_total}) ‚Äî blue=match GT, white=mismatch, black=None")

    ax.set_xticks(np.arange(-0.5, 8, 1), minor=True)
    ax.set_yticks(np.arange(-0.5, N, 1), minor=True)
    ax.grid(which='minor', color='lightgray', linestyle='-', linewidth=0.3)
    ax.tick_params(which='minor', bottom=False, left=False)

    legend_patches = [
        Patch(facecolor='black', edgecolor='black', label='None'),
        Patch(facecolor='white', edgecolor='black', label='Mismatch'),
        Patch(facecolor='blue', edgecolor='black', label='Match (and GT)'),
    ]
    ax.legend(handles=legend_patches, loc='upper right', frameon=True)

    plt.tight_layout()
    if savepath:
        plt.savefig(savepath, bbox_inches='tight')
    if show:
        plt.show()
    plt.close(fig)




import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

def make_answer_grid_from_tuples_2(
    extracted_list_for_all_datapoints,   # (N, 6) with (pred, score)
    majvoted_list_for_all_datapoints,    # (N, 1) -> [pred]
    gt_list_for_all_datapoints,          # (N,) -> pred or None
    xlabels=("8","16","32","64","128","256","majvote","gt"),
    savepath=None,
    show=True,
    start=0,
    n=None,
    indices=None
):
    N_total = len(extracted_list_for_all_datapoints)
    assert len(majvoted_list_for_all_datapoints) == N_total
    assert len(gt_list_for_all_datapoints) == N_total
    assert all(len(row) == 6 for row in extracted_list_for_all_datapoints)

    # --- subset ÏÑ†ÌÉù ---
    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))
    print("DEBUG sel:", len(sel), sel[:20])
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    # Ìó¨Ìçº
    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    # ÏÑ†ÌÉùÎêú Î∂ÄÎ∂ÑÎßå Ï∂îÏ∂ú
    ext = [extracted_list_for_all_datapoints[i] for i in sel]
    maj = [row[0] if isinstance(row, (list, tuple)) and len(row) > 0 else None
           for row in (majvoted_list_for_all_datapoints[i] for i in sel)]
    gt  = [gt_list_for_all_datapoints[i] for i in sel]

    N = len(sel)
    grid_rgb = np.ones((N, 8, 3), dtype=float)

    WHITE = [1, 1, 1]
    BLACK = [0, 0, 0]
    BLUE  = [0, 0, 1]

    # None ‚Üí Í≤ÄÏ†ï, GTÏó¥ Í∏∞Î≥∏ ÌååÎûë
    for i in range(N):
        for j in range(6):
            pred = get_pred(ext[i][j])
            if pred is None:
                grid_rgb[i, j] = WHITE
        if maj[i] is None:
            grid_rgb[i, 6] = WHITE
        if gt[i] is None:
            grid_rgb[i, 7] = WHITE
        else:
            grid_rgb[i, 7] = BLUE

    # GTÏôÄ ÎπÑÍµê
    for i in range(N):
        g = gt[i]
        if g is None:
            continue
        for j in range(6):
            pred = get_pred(ext[i][j])
            if pred is None:
                continue
            grid_rgb[i, j] = BLUE if pred == g else WHITE
        if maj[i] is not None:
            grid_rgb[i, 6] = BLUE if maj[i] == g else WHITE

    # --- Ïó¥Î≥Ñ Ï†ïÌôïÎèÑ Í≥ÑÏÇ∞ (GT != NoneÏù∏ Ìñâ Í∏∞Ï§Ä) ---
    valid_rows = [i for i in range(N) if gt[i]]
    denom = len(valid_rows) 

    acc = []
    # 6Í∞ú extracted
    for j in range(6):
        correct = 0
        for i in valid_rows:
            pred = get_pred(ext[i][j])
            if pred == gt[i]:
                correct += 1
        acc.append(100.0 * correct / denom)
    # majvote
    correct = 0
    for i in valid_rows:
        if maj[i] == gt[i] and gt[i] is not None:
            correct += 1
    acc.append(100.0 * correct / denom)
    # gtÏó¥ÏùÄ ÎπÑÍµê ÎåÄÏÉÅÏù¥ ÏïÑÎãàÎØÄÎ°ú ÌëúÏãúÎßå
    acc.append(np.nan)

    # --- ÌîåÎ°Ø: Í∑∏Î¶¨Îìú + ÏïÑÎûòÏóê ÌçºÏÑºÌä∏ ÌëúÍ∏∞ ---
    # ÏïÑÎûòÏóê Ïà´Ïûê ÎùºÎ≤®ÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ Îî∞Î°ú ÎßåÎì§Ïñ¥ Î≥¥Í∏∞Í∞Ä Ï¢ãÏïÑÏöî.
    dpi = 120
    fig = plt.figure(figsize=(8, max(4, min(16, int(N/40)))), dpi=dpi)
    gs = fig.add_gridspec(nrows=2, ncols=1, height_ratios=[10, 1], hspace=0.05)

    ax = fig.add_subplot(gs[0])
    ax.imshow(grid_rgb, aspect='auto', interpolation='nearest')
    ax.set_xticks(range(8))
    ax.set_xticklabels(xlabels)
    ax.set_yticks([])
    ax.set_xlabel("Methods")
    ax.set_title(
        f"Answers (rows={N} / total={N_total}) ‚Äî blue=match GT, white=mismatch, black=None"
    )

    # ÏñáÏùÄ Í∑∏Î¶¨Îìú
    ax.set_xticks(np.arange(-0.5, 8, 1), minor=True)
    ax.set_yticks(np.arange(-0.5, N, 1), minor=True)
    ax.grid(which='minor', color='lightgray', linestyle='-', linewidth=0.3)
    ax.tick_params(which='minor', bottom=False, left=False)

    # ÏïÑÎûò ÌçºÏÑºÌä∏ ÏòÅÏó≠
    axb = fig.add_subplot(gs[1], sharex=ax)
    axb.set_xlim(-0.5, 7.5)
    axb.set_ylim(0, 1)
    axb.axis('off')

    # Í∞Å Ïó¥ Ï§ëÏïôÏóê ÌçºÏÑºÌä∏ ÌÖçÏä§Ìä∏ (GT Ïó¥ÏùÄ '‚Äî')
    for j in range(8):
        label = "‚Äî" if j == 7 or np.isnan(acc[j]) else f"{acc[j]:.2f}%"
        axb.text(j, 0.5, label, ha='center', va='center', fontsize=10)

    # Î≤îÎ°Ä
    legend_patches = [
        Patch(facecolor='black', edgecolor='black', label='None'),
        Patch(facecolor='white', edgecolor='black', label='Mismatch'),
        Patch(facecolor='blue',  edgecolor='black', label='Match (and GT)'),
    ]
    ax.legend(handles=legend_patches, loc='upper right', frameon=True)

    plt.tight_layout()
    if savepath:
        plt.savefig(savepath, bbox_inches='tight')
    if show:
        plt.show()
    plt.close(fig)

def build_correct_blocks_table(
    extracted_list_for_all_datapoints,   # (N, 6) with items like (pred, score)
    gt_list_for_all_datapoints,          # (N,) -> pred or None
    block_labels=("8","16","32","64","128","256"),
    start=0, n=None, indices=None,
    comparator=None,                     # Ïòà: mathÎ©¥ lambda p,g: is_equiv(p,g)
    none_token="None"                    # NoneÏùÑ Ïñ¥ÎñªÍ≤å ÌëúÍ∏∞Ìï†ÏßÄ
):
    # Í∏∞Î≥∏ ÎπÑÍµê: gsmÏ≤òÎüº ==
    if comparator is None:
        comparator = lambda p, g: (p == g)

    N_total = len(extracted_list_for_all_datapoints)
    assert all(len(row) == 6 for row in extracted_list_for_all_datapoints), "extractedÎäî (N,6) Íµ¨Ï°∞Ïó¨Ïïº Ìï®"

    # Î∂ÄÎ∂Ñ ÏÑ†ÌÉù(ÎÑ§ ÏãúÍ∞ÅÌôî Ìï®ÏàòÏôÄ ÎèôÏùºÌïú Î∞©Ïãù)
    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    # (pred, score)ÏóêÏÑú predÎßå Í∫ºÎÇ¥Í∏∞ + Î≥¥Í∏∞ Ï¢ãÏùÄ Î¨∏ÏûêÏó¥Î°ú Ìè¨Îß∑
    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    def fmt(v):
        if v is None:
            return none_token
        # Ï†ïÏàòÏ≤òÎüº Î≥¥Ïù¥Îäî floatÎäî ÍπîÎÅîÌïòÍ≤å
        if isinstance(v, float) and v.is_integer():
            return str(int(v))
        return str(v)

    rows = []
    for i in sel:
        g = gt_list_for_all_datapoints[i]
        # 6Í∞ú Î∏îÎ°ùÏùò ÏòàÏ∏°Í∞í
        preds = [get_pred(extracted_list_for_all_datapoints[i][j]) for j in range(6)]
        extracted_answers_str = ", ".join(fmt(p) for p in preds)

        # Ï†ïÎãµ ÎßûÏ∂ò Î∏îÎ°ù ÎùºÎ≤®
        labels = []
        if g is not None:
            for j, label in enumerate(block_labels):
                p = preds[j]
                if p is not None and comparator(p, g):
                    labels.append(label)
        correct_blocks_str = ", ".join(labels) if labels else "‚Äî"

        rows.append({
            "gt": fmt(g),
            f"{block_labels}_extracted_answers": extracted_answers_str,
            "correct_blocks": correct_blocks_str,
            # ÌïÑÏöîÌïòÎ©¥ Í∞úÏàòÎèÑ Ï∂îÍ∞Ä Í∞ÄÎä•: "num_correct": len(labels)
        })

    df = pd.DataFrame(rows, columns=["gt",f"{block_labels}_extracted_answers","correct_blocks"])
    return df


import pandas as pd

def build_correct_blocks_table_tokens(
    extracted_list_for_all_datapoints,   # (N, 6) with items like (pred, score)
    gt_list_for_all_datapoints,          # (N,) -> pred or None
    token_nl_list_for_all_datapoints,    # (N,) -> (list of NL answers, list of NL tokens)
    block_labels=("8","16","32","64","128","256"),
    start=0, n=None, indices=None,
    comparator=None,                     # Ïòà: mathÎ©¥ lambda p,g: is_equiv(p,g)
    none_token="None"                    # NoneÏùÑ Ïñ¥ÎñªÍ≤å ÌëúÍ∏∞Ìï†ÏßÄ
):
    # Í∏∞Î≥∏ ÎπÑÍµê: gsmÏ≤òÎüº ==
    if comparator is None:
        comparator = lambda p, g: (p == g)

    N_total = len(extracted_list_for_all_datapoints)
    assert all(len(row) == 6 for row in extracted_list_for_all_datapoints), "extractedÎäî (N,6) Íµ¨Ï°∞Ïó¨Ïïº Ìï®"

    # Î∂ÄÎ∂Ñ ÏÑ†ÌÉù(ÎÑ§ ÏãúÍ∞ÅÌôî Ìï®ÏàòÏôÄ ÎèôÏùºÌïú Î∞©Ïãù)
    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    # (pred, score)ÏóêÏÑú predÎßå Í∫ºÎÇ¥Í∏∞ + Î≥¥Í∏∞ Ï¢ãÏùÄ Î¨∏ÏûêÏó¥Î°ú Ìè¨Îß∑
    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    def fmt(v):
        if v is None:
            return none_token
        # Ï†ïÏàòÏ≤òÎüº Î≥¥Ïù¥Îäî floatÎäî ÍπîÎÅîÌïòÍ≤å
        if isinstance(v, float) and v.is_integer():
            return str(int(v))
        return str(v)

    rows = []
    for i in sel:
        g = gt_list_for_all_datapoints[i]
        # 6Í∞ú Î∏îÎ°ùÏùò ÏòàÏ∏°Í∞í
        preds = [get_pred(extracted_list_for_all_datapoints[i][j]) for j in range(6)]
        extracted_answers_str = ", ".join(fmt(p) for p in preds)

        # Ï†ïÎãµ ÎßûÏ∂ò Î∏îÎ°ù ÎùºÎ≤®
        labels = []
        if g is not None:
            for j, label in enumerate(block_labels):
                p = preds[j]
                if p is not None and comparator(p, g):
                    labels.append(label)
        correct_blocks_str = ", ".join(labels) if labels else "‚Äî"

        # ÏûêÏó∞Ïñ¥ Ï†ïÎ≥¥
        nl_answers, nl_tokens, question = token_nl_list_for_all_datapoints[i]

        rows.append({
            'question': question,
            "gt": fmt(g),
            f"{block_labels}_extracted_answers": extracted_answers_str,
            "correct_blocks": correct_blocks_str,
            "nl_answers": nl_answers,
            "nl_tokens": nl_tokens,
        })

    df = pd.DataFrame(rows, columns=['question',
                                    "gt",
                                     f"{block_labels}_extracted_answers",
                                     "correct_blocks",
                                     "nl_answers",
                                     "nl_tokens"])
    return df

def make_answer_grid_from_tuples_3(
    extracted_list_for_all_datapoints,   # (N, 6) with (pred, score)
    majvoted_list_for_all_datapoints,    # (N, 1) -> [pred] ÎòêÎäî (N,) -> pred
    gt_list_for_all_datapoints,          # (N,) -> pred or None
    xlabels=("8","16","32","64","128","256","majvote","gt"),
    savepath=None,
    show=True,
    start=0,
    n=None,
    indices=None,
    # Ï†êÏàò Í≥ÑÏÇ∞ÏùÑ ÎÑà ÏΩîÎìúÏóê ÎßûÏ∂îÍ∏∞ ÏúÑÌïú ÎπÑÍµê Ìï®Ïàò ÌõÖ (Í∏∞Î≥∏ÏùÄ ==)
    comparator=None    # Ïòà: lambda p,g: is_equiv(p,g)  (mathÏùº Îïå), lambda p,g: evaluate_countdown(p,g) (countdownÏùº Îïå)
):
    # Í∏∞Î≥∏ ÎπÑÍµê (gsmÍ≥º ÎèôÏùº)
    if comparator is None:
        comparator = lambda p, g: (p == g)

    N_total = len(extracted_list_for_all_datapoints)
    assert len(majvoted_list_for_all_datapoints) == N_total
    assert len(gt_list_for_all_datapoints) == N_total
    assert all(len(row) == 6 for row in extracted_list_for_all_datapoints)

    # --- ÏÑúÎ∏åÏÖã ÏÑ†ÌÉù ---
    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))

    print("DEBUG sel:", len(sel), sel[:20])
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    # Ìó¨Ìçº
    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    # ÏÑ†ÌÉùÎêú Î∂ÄÎ∂ÑÎßå Ï∂îÏ∂ú
    ext = [extracted_list_for_all_datapoints[i] for i in sel]
    # majvoteÍ∞Ä [pred] ÎòêÎäî predÏùº Ïàò ÏûàÏñ¥ÏÑú ÌèâÌÉÑÌôî
    maj = []
    for i in sel:
        row = majvoted_list_for_all_datapoints[i]
        if isinstance(row, (list, tuple)):
            maj.append(row[0] if len(row) > 0 else None)
        else:
            maj.append(row)
    gt  = [gt_list_for_all_datapoints[i] for i in sel]

    N = len(sel)
    grid_rgb = np.ones((N, 8, 3), dtype=float)

    WHITE = [1, 1, 1]
    BLACK = [0, 0, 0]
    BLUE  = [0, 0, 1]

    # ---- ÏÉâÏπ†: None ‚Üí Í≤ÄÏ†ï, GTÏó¥ Í∏∞Î≥∏ ÌååÎûë ----
    for i in range(N):
        # Ïïû 6Í∞ú Î∞©Î≤ï
        for j in range(6):
            pred = get_pred(ext[i][j])
            if pred is None:
                grid_rgb[i, j] = WHITE      # ‚Üê NoneÏùÄ Í≤ÄÏ†ï
        # majvote
        if maj[i] is None:
            grid_rgb[i, 6] = WHITE
        # gt
        if gt[i] is None:
            grid_rgb[i, 7] = BLACK
        else:
            grid_rgb[i, 7] = BLUE

    # ---- GTÏôÄ ÎπÑÍµê: Í∞ôÏúºÎ©¥ ÌååÎûë, Îã§Î•¥Î©¥ ÌïòÏñë ----
    for i in range(N):
        g = gt[i]
        for j in range(6):
            pred = get_pred(ext[i][j])
            if pred is None:
                continue
            grid_rgb[i, j] = BLUE if (g is not None and comparator(pred, g)) else WHITE
        if maj[i] is not None:
            grid_rgb[i, 6] = BLUE if (g is not None and comparator(maj[i], g)) else WHITE

    # ---- Ïó¥Î≥Ñ Ï†ïÌôïÎèÑ Í≥ÑÏÇ∞ ----
    # ÎÑà ÏΩîÎìú(printed accuracy)ÏôÄ ÎèôÏùºÌïòÍ≤å: Î∂ÑÎ™® = ÏÑ†ÌÉùÎêú Ï†ÑÏ≤¥ N (gtÍ∞Ä NoneÏù∏ ÌñâÎèÑ Ìè¨Ìï®, Ïù¥ ÌñâÏùÄ Î¨¥Ï°∞Í±¥ Ïò§Îãµ)
    denom = max(N, 1)

    acc = []
    # 6Í∞ú Î∞©Î≤ï
    for j in range(6):
        correct = 0
        for i in range(N):
            g = gt[i]
            pred = get_pred(ext[i][j])
            if (g is not None) and (pred is not None) and comparator(pred, g):
                correct += 1
            # g is None Ïù¥Í±∞ÎÇò pred is None ÏùÄ Ïò§ÎãµÏúºÎ°ú Ïπ¥Ïö¥Ìä∏ (Î∂ÑÎ™®Ïóî Ìè¨Ìï®)
        acc.append(100.0 * correct / denom)

    # majvote
    correct = 0
    for i in range(N):
        g = gt[i]
        p = maj[i]
        if (g is not None) and (p is not None) and comparator(p, g):
            correct += 1
    acc.append(100.0 * correct / denom)

    # gtÏó¥(ÏûêÍ∏∞ ÏûêÏã† ÎπÑÍµê)ÏùÄ ÏùòÎØ∏ ÏóÜÏúºÎãà ÌëúÏãúÎäî ‚Äî Î°ú
    acc.append(np.nan)

    # ---- ÌîåÎ°Ø: Í∑∏Î¶¨Îìú + ÏïÑÎûò ÌçºÏÑºÌä∏ ----
    dpi = 300
    fig = plt.figure(figsize=(8, max(4, min(16, int(N/40)))), dpi=dpi)
    gs = fig.add_gridspec(nrows=2, ncols=1, height_ratios=[10, 1], hspace=0.01)

    ax = fig.add_subplot(gs[0])
    ax.imshow(grid_rgb, aspect='auto', interpolation='nearest')
    ax.set_xticks(range(8))
    ax.set_xticklabels(xlabels)
    ax.set_yticks([])
    ax.set_xlabel("Methods")
    ax.set_title("Answers (rows={} / total={}) ‚Äî blue=match GT, white=mismatch, black=GT is null"
                 .format(N, N_total))

    # ÏñáÏùÄ Í∑∏Î¶¨Îìú
    ax.set_xticks(np.arange(-0.5, 8, 1), minor=True)
    ax.set_yticks(np.arange(-0.5, N, 1), minor=True)
    # ax.grid(which='minor', color='lightgray', linestyle='-', linewidth=0.3)
    ax.tick_params(which='minor', bottom=False, left=False)

    # ÏïÑÎûò ÌçºÏÑºÌä∏ ÏòÅÏó≠
    axb = fig.add_subplot(gs[1], sharex=ax)
    axb.set_xlim(-0.5, 7.5)
    axb.set_ylim(0, 1)
    axb.axis('off')

    for j in range(8):
        label = "‚Äî" if j == 7 or (isinstance(acc[j], float) and np.isnan(acc[j])) else f"{acc[j]:.2f}%"
        axb.text(j, 0.5, label, ha='center', va='center', fontsize=10)

    # Î≤îÎ°Ä
    legend_patches = [
        Patch(facecolor='black', edgecolor='black', label='None'),
        Patch(facecolor='white', edgecolor='black', label='Mismatch'),
        Patch(facecolor='blue',  edgecolor='black', label='Match'),
    ]
    ax.legend(handles=legend_patches, loc='upper right', frameon=True)

    plt.tight_layout()
    if savepath:
        plt.savefig(savepath, bbox_inches='tight')
    if show:
        plt.show()
    plt.close(fig)




import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

def make_answer_grid_general(
    extracted_list_for_all_datapoints,     # (N, M) with (pred, score) or just pred
    majvoted_list_for_all_datapoints,      # (N,) or (N,1)
    gt_list_for_all_datapoints,            # (N,)
    xlabels=None,                           # e.g., ("8","16","32","64","128","256","majvote","gt")
    savepath=None,
    show=True,
    start=0,
    n=None,
    indices=None,
    comparator=None      # e.g., lambda p,g: p==g
):
    """ÏÑ∏Î°úÌòï(Ìñâ=Îç∞Ïù¥ÌÑ∞Ìè¨Ïù∏Ìä∏, Ïó¥=Î∞©Î≤ïÎì§+majvote+gt). Ïó¥ Í∞úÏàò Í∞ÄÎ≥Ä ÏßÄÏõê."""
    # Í∏∞Î≥∏ ÎπÑÍµê
    if comparator is None:
        comparator = lambda p, g: (p == g)

    N_total = len(extracted_list_for_all_datapoints)
    assert len(majvoted_list_for_all_datapoints) == N_total
    assert len(gt_list_for_all_datapoints) == N_total
    # Î∞©Î≤ï Í∞úÏàò(M)Î•º Ï≤´ ÌñâÏóêÏÑú Ï∂îÎ°†
    M = len(extracted_list_for_all_datapoints[0])
    assert all(len(row) == M for row in extracted_list_for_all_datapoints), "Î™®Îì† ÌñâÏùò Î∞©Î≤ï Í∞úÏàòÍ∞Ä ÎèôÏùºÌï¥Ïïº Ìï©ÎãàÎã§."

    # ÏÑúÎ∏åÏÖã ÏÑ†ÌÉù
    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    # Ìó¨Ìçº: (pred,score) ‚Üí pred
    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    # ÏÑ†ÌÉùÎêú Îç∞Ïù¥ÌÑ∞Îßå Ï∂îÏ∂ú
    ext = [extracted_list_for_all_datapoints[i] for i in sel]
    maj = []
    for i in sel:
        row = majvoted_list_for_all_datapoints[i]
        if isinstance(row, (list, tuple)):
            maj.append(row[0] if len(row) > 0 else None)
        else:
            maj.append(row)
    gt  = [gt_list_for_all_datapoints[i] for i in sel]

    N = len(sel)

    # ÏÉâÏÉÅ Îß§Ìïë
    WHITE = np.array([1., 1., 1.])
    BLACK = np.array([0., 0., 0.])
    BLUE  = np.array([0., 0., 1.])

    # Í∑∏Î¶¨Îìú: N x (M + 2)  (methods..., majvote, gt)
    grid_rgb = np.ones((N, M + 2, 3), dtype=float)

    # Í∏∞Î≥∏ Î∞∞Í≤Ω (ÏòàÏ†Ñ Î°úÏßÅ Ïú†ÏßÄ: pred None/maj None ‚Üí Ìù∞ÏÉâ, gt None ‚Üí Í≤ÄÏ†ï, gt Ï±ÑÏõåÏßÑ Ïπ∏ÏùÄ ÌååÎûë)
    for i in range(N):
        # methods
        for j in range(M):
            pred = get_pred(ext[i][j])
            if pred is None:
                grid_rgb[i, j] = WHITE
        # majvote
        if maj[i] is None:
            grid_rgb[i, M] = WHITE
        # gt
        if gt[i] is None:
            grid_rgb[i, M + 1] = BLACK
        else:
            grid_rgb[i, M + 1] = BLUE

    # GT ÎπÑÍµê Í≤∞Í≥ºÎ°ú ÏÉâÏπ† (ÏùºÏπò: ÌååÎûë, Î∂àÏùºÏπò: Ìù∞ÏÉâ)
    for i in range(N):
        g = gt[i]
        for j in range(M):
            pred = get_pred(ext[i][j])
            if pred is None:
                continue
            grid_rgb[i, j] = BLUE if (g is not None and comparator(pred, g)) else WHITE
        if maj[i] is not None:
            grid_rgb[i, M] = BLUE if (g is not None and comparator(maj[i], g)) else WHITE

    # Ï†ïÌôïÎèÑ
    denom = max(N, 1)
    acc = []
    for j in range(M):
        correct = 0
        for i in range(N):
            g = gt[i]
            pred = get_pred(ext[i][j])
            if (g is not None) and (pred is not None) and comparator(pred, g):
                correct += 1
        acc.append(100.0 * correct / denom)

    # majvote
    correct = 0
    for i in range(N):
        g = gt[i]
        p = maj[i]
        if (g is not None) and (p is not None) and comparator(p, g):
            correct += 1
    acc.append(100.0 * correct / denom)

    # gt Ïó¥ÏùÄ NaN
    acc.append(np.nan)

    # ÎùºÎ≤®
    if xlabels is None:
        base = [str(x) for x in range(M)]
        xlabels = tuple(base + ["majvote", "gt"])
    else:
        assert len(xlabels) == M + 2, f"xlabels Í∏∏Ïù¥Îäî {M+2} Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§."

    # ÌîåÎ°Ø(ÏÑ∏Î°úÌòï)
    dpi = 300
    fig = plt.figure(figsize=(max(6, min(18, (M+2))), max(4, min(16, int(N / 40)))), dpi=dpi)
    gs = fig.add_gridspec(nrows=2, ncols=1, height_ratios=[10, 1], hspace=0.08)

    ax = fig.add_subplot(gs[0])
    ax.imshow(grid_rgb, aspect='auto', interpolation='nearest')
    ax.set_xticks(range(M + 2))
    ax.set_xticklabels(xlabels)
    ax.set_yticks([])
    ax.set_xlabel("Methods")
    ax.set_title(f"Answers (rows={N} / total={N_total}) ‚Äî blue=match GT, white=mismatch, black=GT is null")

    # ÏïÑÎûò ÌçºÏÑºÌä∏
    axb = fig.add_subplot(gs[1], sharex=ax)
    axb.set_xlim(-0.5, M + 1.5)
    axb.set_ylim(0, 1)
    axb.axis('off')
    for j in range(M + 2):
        label = "‚Äî" if j == (M + 1) or (isinstance(acc[j], float) and np.isnan(acc[j])) else f"{acc[j]:.2f}%"
        axb.text(j, 0.5, label, ha='center', va='center', fontsize=10)

    # Î≤îÎ°Ä
    legend_patches = [
        Patch(facecolor='black', edgecolor='black', label='GT None'),
        Patch(facecolor='white', edgecolor='black', label='Mismatch/None'),
        Patch(facecolor='blue',  edgecolor='black', label='Match'),
    ]
    ax.legend(handles=legend_patches, loc='upper right', frameon=True)

    plt.tight_layout()
    if savepath:
        plt.savefig(savepath, bbox_inches='tight')
    if show:
        plt.show()
    plt.close(fig)


def make_answer_grid_horizontal(
    extracted_list_for_all_datapoints,
    majvoted_list_for_all_datapoints,
    gt_list_for_all_datapoints,
    ylabels=None,                         # Î∞©Î≤ï ÎùºÎ≤®(ÏÑ∏Î°úÏ∂ï). NoneÏù¥Î©¥ 0..M-1 + ["majvote","gt"]
    savepath=None,
    show=True,
    start=0,
    n=None,
    indices=None,
    comparator=None
):
    """Í∞ÄÎ°úÌòï(Ïó¥=Îç∞Ïù¥ÌÑ∞Ìè¨Ïù∏Ìä∏, Ìñâ=Î∞©Î≤ïÎì§+majvote+gt). Í∏¥ ÏÑ∏Î°ú ÎåÄÏã† Í∞ÄÎ°úÎ°ú ÎÑìÍ≤å."""
    if comparator is None:
        comparator = lambda p, g: (p == g)

    N_total = len(extracted_list_for_all_datapoints)
    assert len(majvoted_list_for_all_datapoints) == N_total
    assert len(gt_list_for_all_datapoints) == N_total
    M = len(extracted_list_for_all_datapoints[0])
    assert all(len(row) == M for row in extracted_list_for_all_datapoints)

    # ÏÑ†ÌÉù
    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. start/n ÎòêÎäî indicesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    ext = [extracted_list_for_all_datapoints[i] for i in sel]
    maj = []
    for i in sel:
        row = majvoted_list_for_all_datapoints[i]
        if isinstance(row, (list, tuple)):
            maj.append(row[0] if len(row) > 0 else None)
        else:
            maj.append(row)
    gt  = [gt_list_for_all_datapoints[i] for i in sel]

    N = len(sel)

    WHITE = np.array([1., 1., 1.])
    BLACK = np.array([0., 0., 0.])
    BLUE  = np.array([0., 0., 1.])

    # (M + 2) x N
    grid_rgb = np.ones((M + 2, N, 3), dtype=float)

    # Í∏∞Î≥∏ ÏÉâ
    for j in range(M):              # Ìñâ: Î∞©Î≤ï index
        for i in range(N):          # Ïó¥: Îç∞Ïù¥ÌÑ∞ index
            pred = get_pred(ext[i][j])
            if pred is None:
                grid_rgb[j, i] = WHITE
    for i in range(N):
        if maj[i] is None:
            grid_rgb[M, i] = WHITE
        if gt[i] is None:
            grid_rgb[M + 1, i] = BLACK
        else:
            grid_rgb[M + 1, i] = BLUE

    # GT ÎπÑÍµê
    for j in range(M):
        for i in range(N):
            pred = get_pred(ext[i][j])
            g = gt[i]
            if pred is None:
                continue
            grid_rgb[j, i] = BLUE if (g is not None and comparator(pred, g)) else WHITE
    for i in range(N):
        g = gt[i]
        p = maj[i]
        if p is not None:
            grid_rgb[M, i] = BLUE if (g is not None and comparator(p, g)) else WHITE

    # Ï†ïÌôïÎèÑ (Î∂ÑÎ™®=N)
    denom = max(N, 1)
    acc = []
    for j in range(M):
        correct = 0
        for i in range(N):
            g = gt[i]
            pred = get_pred(ext[i][j])
            if (g is not None) and (pred is not None) and comparator(pred, g):
                correct += 1
        acc.append(100.0 * correct / denom)
    # majvote
    correct = 0
    for i in range(N):
        g = gt[i]
        p = maj[i]
        if (g is not None) and (p is not None) and comparator(p, g):
            correct += 1
    acc.append(100.0 * correct / denom)
    # gtÎäî NaN
    acc.append(np.nan)

    # ÎùºÎ≤®
    if ylabels is None:
        ylabels = [str(k) for k in range(M)] + ["majvote", "gt"]
    else:
        assert len(ylabels) == M + 2, f"ylabels Í∏∏Ïù¥Îäî {M+2} Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§."

    # ÌîåÎ°Ø(Í∞ÄÎ°úÌòï: Ìñâ=Î∞©Î≤ï, Ïó¥=Îç∞Ïù¥ÌÑ∞)
    dpi = 300
    # Í∞ÄÎ°úÎ°ú Í∏∏Í≤å: Ìè≠ÏùÄ NÏóê ÎπÑÎ°Ä, ÎÜíÏù¥Îäî Î∞©Î≤ï ÏàòÏóê ÎπÑÎ°Ä
    fig_w = max(8, min(24, int(N / 40) + 8))
    fig_h = max(4, min(16, int((M + 2) / 3) + 2))
    fig = plt.figure(figsize=(fig_w, fig_h), dpi=dpi)
    gs = fig.add_gridspec(nrows=1, ncols=2, width_ratios=[10, 1], wspace=0.05)

    ax = fig.add_subplot(gs[0])
    ax.imshow(grid_rgb, aspect='auto', interpolation='nearest')
    ax.set_yticks(range(M + 2))
    ax.set_yticklabels(ylabels)
    ax.set_xticks([])     # Îç∞Ïù¥ÌÑ∞Ìè¨Ïù∏Ìä∏Í∞Ä ÎÑàÎ¨¥ ÎßéÏúºÎ©¥ Ï∂ï Ï†úÍ±∞
    ax.set_xlabel(f"Datapoints (N={N} / total={N_total})")
    ax.set_title("Answers ‚Äî blue=match GT, white=mismatch, black=GT is null")

    # Ïò§Î•∏Ï™ΩÏóê Ï†ïÌôïÎèÑ ÌëúÍ∏∞
    axr = fig.add_subplot(gs[1], sharey=ax)
    axr.set_ylim(-0.5, M + 1.5)
    axr.set_xlim(0, 1)
    axr.axis('off')
    for j in range(M + 2):
        label = "‚Äî" if j == (M + 1) or (isinstance(acc[j], float) and np.isnan(acc[j])) else f"{acc[j]:.2f}%"
        axr.text(0.5, j, label, ha='center', va='center', fontsize=10)

    legend_patches = [
        Patch(facecolor='black', edgecolor='black', label='GT None'),
        Patch(facecolor='white', edgecolor='black', label='Mismatch/None'),
        Patch(facecolor='blue',  edgecolor='black', label='Match'),
    ]
    ax.legend(handles=legend_patches, loc='upper right', frameon=True)

    plt.tight_layout()
    if savepath:
        plt.savefig(savepath, bbox_inches='tight')
    if show:
        plt.show()
    plt.close(fig)


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

def make_answer_grid_horizontal(
    extracted_list_for_all_datapoints,
    majvoted_list_for_all_datapoints,   # ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏßÄÎßå ÏãúÍ∑∏ÎãàÏ≤ò Ïú†ÏßÄ
    gt_list_for_all_datapoints,
    ylabels=None,
    savepath=None,
    show=True,
    start=0,
    n=None,
    indices=None,
    comparator=None
):
    if comparator is None:
        comparator = lambda p, g: (p == g)

    N_total = len(extracted_list_for_all_datapoints)
    M = len(extracted_list_for_all_datapoints[0])
    assert all(len(row) == M for row in extracted_list_for_all_datapoints)

    if indices is not None:
        sel = list(indices)
    else:
        end = N_total if n is None else min(N_total, start + n)
        sel = list(range(start, end))
    if not sel:
        raise ValueError("ÏÑ†ÌÉùÎêú ÌñâÏù¥ ÏóÜÏäµÎãàÎã§.")

    def get_pred(x):
        if isinstance(x, (tuple, list)) and len(x) >= 1:
            return x[0]
        return x

    ext = [extracted_list_for_all_datapoints[i] for i in sel]
    gt  = [gt_list_for_all_datapoints[i] for i in sel]
    N = len(sel)

    WHITE = np.array([1., 1., 1.])
    BLACK = np.array([0., 0., 0.])
    PASTEL_BLUE = np.array([0.5, 0.7, 1.0])   # Îß§Ïπò(Ï†ïÎãµ)Ïö© ÌååÏä§ÌÖî Î∏îÎ£®
    PURPLE = np.array([0.7, 0.5, 0.9])        # "Î™®Îëê Ïò§Îãµ(ÎπÑGT)" Í∞ïÏ°∞Ïö© Î≥¥ÎùºÏÉâ

    grid_rgb = np.ones((M + 1, N, 3), dtype=float)

    # Ï¥àÍ∏∞ ÏÉâÏÉÅ
    for j in range(M):
        for i in range(N):
            pred = get_pred(ext[i][j])
            if pred is None:
                grid_rgb[j, i] = WHITE
    for i in range(N):
        if gt[i] is None:
            grid_rgb[M, i] = BLACK
        else:
            grid_rgb[M, i] = PASTEL_BLUE

    # GT Îß§Ïπ≠ ÏÉâÏÉÅ
    for j in range(M):
        for i in range(N):
            pred = get_pred(ext[i][j])
            g = gt[i]
            if pred is None:
                continue
            grid_rgb[j, i] = PASTEL_BLUE if (g is not None and comparator(pred, g)) else WHITE

    # "Î™®Îëê Ïò§Îãµ(ÎπÑGT)" Ïó¥ Ï∞æÍ∏∞:
    # Ï°∞Í±¥: j=0..M-1 Î™®Îì† ÏÖÄ ÏÉâÏù¥ WHITE (Ï¶â, Ïñ¥Îñ§ Î∏îÎ£® Îß§ÏπòÎèÑ ÏóÜÏùå) Ïù¥Í≥† GTÎäî NoneÏù¥ ÏïÑÎãò
    for i in range(N):
        if gt[i] is not None:
            # Î™®Îì† ÎπÑGT ÌñâÏù¥ Ìù∞ÏÉâÏù∏ÏßÄ Ï≤¥ÌÅ¨
            col_block = grid_rgb[0:M, i]
            all_white = np.allclose(col_block, WHITE)
            if all_white:
                # Ìï¥Îãπ Ïó¥Ïùò GT ÏÖÄÏùÑ Î≥¥ÎùºÏÉâÏúºÎ°ú ÎçÆÏñ¥ Í∞ïÏ°∞
                grid_rgb[M, i] = PURPLE

    # Ï†ïÌôïÎèÑ Í≥ÑÏÇ∞
    denom = max(N, 1)
    acc = []
    for j in range(M):
        correct = 0
        for i in range(N):
            g = gt[i]
            pred = get_pred(ext[i][j])
            if (g is not None) and (pred is not None) and comparator(pred, g):
                correct += 1
        acc.append(100.0 * correct / denom)
    acc.append(np.nan)

    if ylabels is None:
        ylabels = [str(k) for k in range(M)] + ["GT"]
    else:
        ylabels = [lab for lab in ylabels if lab.lower() != "majvote"]
        assert len(ylabels) == M + 1

    dpi = 300
    fig_w = max(8, min(24, int(N / 40) + 8))
    fig_h = max(4, min(16, int((M + 1) / 3) + 2))
    fig = plt.figure(figsize=(fig_w, fig_h), dpi=dpi)
    gs = fig.add_gridspec(nrows=1, ncols=2, width_ratios=[10, 1], wspace=0.05)

    ax = fig.add_subplot(gs[0])
    ax.imshow(grid_rgb, aspect='auto', interpolation='nearest')
    ax.set_yticks(range(M + 1))
    ax.set_yticklabels(ylabels, fontsize=25)
    ax.set_xticks([0, N_total - 1])
    ax.set_xticklabels([0, N_total - 1], fontsize=25)
    ax.set_xlabel(f"GSM8K datapoints ({N_total})", fontsize=30, labelpad=30)
    ax.set_ylabel("Block Size", fontsize=30, labelpad=15)
    ax_right = ax.twinx()
    ax_right.set_ylabel("Accuracy (%)", fontsize=30, rotation=270, labelpad=200)
    ax_right.set_yticks([])
    ax.set_title("Answer correctness per datapoint", fontsize=35, pad=15)

    # Ïò§Î•∏Ï™Ω accuracy ÌëúÍ∏∞
    axr = fig.add_subplot(gs[1], sharey=ax)
    axr.set_ylim(-0.5, M + 0.5)
    axr.set_xlim(0, 1)
    axr.axis('off')

    for j in range(M + 1):
        label = "100.00%" if j == M or (isinstance(acc[j], float) and np.isnan(acc[j])) else f"{acc[j]:.2f}%"
        axr.text(0.5, j, label, ha='center', va='center', fontsize=25)

    # Î≤îÎ°Ä: Match / Mismatch / GT is None / Î™®Îëê Ïò§Îãµ(ÎπÑGT)
    legend_patches = [
        Patch(facecolor=PASTEL_BLUE, edgecolor='black', label='Match'),
        Patch(facecolor='white', edgecolor='black', label='Mismatch'),
        Patch(facecolor='black', edgecolor='black', label='GT is None'),
        Patch(facecolor=PURPLE, edgecolor='black', label='All wrong (non-GT)'),
    ]
    ax.legend(
        handles=legend_patches,
        loc='lower center',
        bbox_to_anchor=(0.5, -0.25),
        frameon=True,
        fontsize=20,
        ncol=len(legend_patches),
        handlelength=1.5,
        columnspacing=1.5
    )

    plt.tight_layout()
    if savepath:
        plt.savefig(savepath, bbox_inches='tight')
    if show:
        plt.show()
    plt.close(fig)



import re
if __name__ == "__main__":
  
    ################
    folder_path = '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250831_arcc_aime_truthful'
    folder_path = '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250922_128_[4, 8, 16, 32, 64]_42'
    # folder_path = '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250916_dynamic_increasing_blocksize_BOLT'
    # folder_path = '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250909_truthfulqa_subset_BOLT/seed42_bolt'
    # folder_path = '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250831_arcc_aime_truthful'
    
    
    folder_path = '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250923_512_random_topkmargin'
    data_type = 'truthfulqa'
    ###############

    select_strategy = 'select_first' # 'either_right' 'select_first'
    vote_rule = 'frequency' # 'frequency_tie_lowest_nll' 'lowest_nll' 'frequency'

    save_BOLT_json = False

    # include_str_list = ['block8', 'block16', 'block32', 'block64', 'block128', 'block256']
    # include_str_list = ['block16', 'block32', 'block64', 'block128']
    # include_str_list = [f'[{8*i}, {256-(8*i)}]' for i in range(1,26)]

    include_str_list = ['_seed0_','_seed1_','_seed2_','_seed3_','_seed4_','_seed42_'] # [] means just use all json in that folder: excluding nothing
    include_str_list = ['block8', 'block16', 'block32', 'block64', 'block128']


    include_str_list = ['_seed42_', '_seed0_','_seed1_','_seed2_','_seed3_','_seed4_']
    # include_str_list = ['_seed42_']
    # BOLT for MMLU
    include_str_list = ['/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250908_mmlu_BOLT/20250909_192758_mmlu_LLaDA-8B-Instruct_low_confidence_genlen256_diffsteps128_block8_seed42_kvbaseline_generations.json',
                        '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250908_mmlu_BOLT/20250909_194143_mmlu_LLaDA-8B-Instruct_low_confidence_genlen256_diffsteps128_block16_seed42_kvbaseline_generations.json',
                        '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250908_mmlu_BOLT/20250909_195528_mmlu_LLaDA-8B-Instruct_low_confidence_genlen256_diffsteps128_block32_seed42_kvbaseline_generations.json',
                        '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250908_mmlu_BOLT/20250909_200913_mmlu_LLaDA-8B-Instruct_low_confidence_genlen256_diffsteps128_block64_seed42_kvbaseline_generations.json',
                        '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250908_mmlu_BOLT/20250909_202256_mmlu_LLaDA-8B-Instruct_low_confidence_genlen256_diffsteps128_block128_seed42_kvbaseline_generations.json',]
    



    include_str_list = []
    exclude_str_list = ['/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250923_512_random_topkmargin/20250924_033242_truthfulqa_LLaDA-8B-Instruct_topk_margin_genlen512_diffsteps256_block512_seed42_kvbaseline_generations.json']
    

    a = []
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            abs_path = os.path.abspath(os.path.join(root, file))
            if data_type in abs_path:
                a.append(abs_path)
    include_str_list = a[:] # a[-30:], a[-25:], a[-20:], a[-15:], a[-10:],a[-5:] for 


    # print(include_str_list)
    ###############################
    # Dynamic BOLT check
    ###############################
    # a = []
    # for root, dirs, files in os.walk(folder_path):
    #     for file in files:
    #         abs_path = os.path.abspath(os.path.join(root, file))
    #         a.append(abs_path)
    # include_str_list = a[-30:] # a[-30:], a[-25:], a[-20:], a[-15:], a[-10:],a[-5:] for 
    # # '/home/work/jihoon_wombat_storage/JIHOON/d1_llada_grpo_test/eval/eval_result_20250916_dynamic_increasing_blocksize_BOLT'
    # exclude_str_list = []
    ###############################


    
    if save_BOLT_json:
        BOLT_json = {
            "generations": []
        }
        def add_generation(BOLT_json, question, prompt_input, generations, ground_truth, loglikelihood):
            BOLT_json["generations"].append({
                "question": question,
                "prompt_input": prompt_input,
                "generations": generations,
                "ground_truth": ground_truth,
                "loglikelihood": loglikelihood
            })


    paths = get_all_file_paths_2(folder_path, data_type, include_str_list = include_str_list, exclude_str_list = exclude_str_list)
    for path in paths:
        print(path)
    print(f'majority vote paths count: {len(paths)}')
    print(f'dataset: {data_type} | select_strategy: {select_strategy}')
    all_paths = [[paths[i]] for i in range(len(paths))]+[paths]
    all_paths = [paths] # Just for quick result

    
    for now_target_path_index in tqdm(range(len(all_paths))):
        paths = all_paths[now_target_path_index]
        # Î™®Îì† ÌååÏùº ÎØ∏Î¶¨ ÏùΩÏñ¥Ïò§Í∏∞
        all_data = []
        for path in paths:
            with open(path, encoding="utf-8") as f:
                all_data.append(json.load(f))

        # Í∏∞Ï§Ä ÌååÏùº (Ï≤´ Î≤àÏß∏ ÌååÏùº ground_truth ÏÇ¨Ïö©)
        base_data = all_data[0]
        num_datapoints = len(base_data["generations"])

        result_list = []
        result_tie_list = []
        # distance_list = []
        # common_prefix_length_list = [] 
        # generation_length_list = []



        extracted_list_for_all_datapoints = []
        extracted_list_for_all_datapoints_for_BOLT = []
        majvoted_list_for_all_datapoints = [] 
        gt_list_for_all_datapoints = []
        token_nl_list_for_all_datapoints = []
        nll_list = []

        for num in range(num_datapoints):
            now_datapoint_question = base_data["generations"][num]["prompt_input"]
            now_datapoint_gt = base_data["generations"][num]["ground_truth"]
            now_datapoint_question_0 = base_data["generations"][num]["question"]
            now_extracted_ans_list = []
            now_ans_list = []
            now_nl_tokens_list = []

            now_generation_and_extraction = []


            for data in all_data:
            
                now_generation = data["generations"][num]["generations"]
                now_question = data["generations"][num]["question"]



                try:
                    now_generation_ll = data["generations"][num]["loglikelihood"]
                except Exception:
                    now_generation_ll = 0     
                
                try:
                    now_generation_nl_tokens = data['generations'][num]["intermediate_types"][-1]
                    now_nl_tokens_list.append(now_generation_nl_tokens)
                   
                except Exception:
                    pass        

                

                if data_type == 'gsm':
                    now_extracted = gsm_extract_ans_from_generation(now_generation)
                elif data_type == 'math':
                    now_extracted = parse_math_answers(now_generation)
                elif data_type == 'countdown':
                    now_extracted = parse_countdown_answers(now_generation)
                elif data_type == 'sudoku':
                    now_extracted = parse_sudoku_answers(now_question, now_generation)
                elif data_type == 'arcc':
                    now_extracted = parse_math_answers(now_generation)
                elif data_type == 'truthfulqa':
                    now_extracted = parse_math_answers(now_generation)
                elif data_type == 'hellaswag':
                    now_extracted = parse_math_answers(now_generation)
                elif data_type == 'mmlu':
                    now_extracted = parse_math_answers(now_generation)



                now_ans_list.append(now_generation)
                now_extracted_ans_list.append((now_extracted, now_generation_ll))
                now_generation_and_extraction.append((now_extracted, now_generation, now_generation_ll))


            extracted_list_for_all_datapoints.append(now_extracted_ans_list)
            token_nl_list_for_all_datapoints.append((now_ans_list, now_nl_tokens_list, now_datapoint_question))
            extracted_list_for_all_datapoints_for_BOLT.append(now_generation_and_extraction)

            # print(now_nl_tokens_list)
        

            # print(now_extracted_ans_list, now_datapoint_gt)
            # majority_voted, is_tied, distance = most_frequent_element_4(now_extracted_ans_list)
            # if distance: distance_list.append(distance)

            # if num == 3:
            #     print(now_ans_list)
            #     exit()

            # ######################  !!!!!!!!!!!!!!!!!!   ################################
            # majority_voted_list, is_tied = most_frequent_elements(now_extracted_ans_list) 
            # # Past selecting criteria. None can be the final output!!
            # # But our prime rule of majvote is that 'we vote for extracted answer' so lets exclude None 
            # majority_voted_list, is_tied = most_frequent_elements_exclude_None(now_extracted_ans_list) 


            # print(now_extracted_ans_list)
    
            majority_voted_list, is_tied = most_frequent_elements_exclude_None_and_tie_lownll(now_extracted_ans_list, 
            selecting_rule=vote_rule) # 'frequency_tie_lowest_nll' 'lowest_nll' 'frequency'


            # if is_tied:
            #     print(majority_voted_list)
            # print(majority_voted_list)


            if select_strategy == 'select_first': # This is out BOLT
                majority_voted_list = majority_voted_list[:1] # for select first one when tied
                # print(majority_voted_list)
                nll = majority_voted_list[0][1] # (voted one ans, nll for that)
                nll_list.append(nll)
                

                ##################################################
                # Generate BOLT json 
                if save_BOLT_json:
                    bolt_selected_generation = None
                    for entry in extracted_list_for_all_datapoints_for_BOLT:
                        for extracted, generation, ll in entry:
                            if majority_voted_list[0][0] == extracted and nll == -ll:
                                bolt_selected_generation = generation
                                break
                    
                    assert bolt_selected_generation != None 
                    add_generation(BOLT_json, now_datapoint_question_0, now_datapoint_question, bolt_selected_generation, now_datapoint_gt, -nll)
                ##################################################


            elif select_strategy == 'either_right':
                majority_voted_list = majority_voted_list 
                nll = majority_voted_list[0][1] # (voted one ans, nll for that)
                nll_list.append(nll)
            # print(majority_voted_list)

            majvoted_list_for_all_datapoints.append(majority_voted_list)
            gt_list_for_all_datapoints.append(now_datapoint_gt)
            # print("Î™®Îì† Î¨∏ÏûêÏó¥Ïù¥ ÎèôÏùºÌïú prefix Í∏∏Ïù¥:", common_prefix_length)

            is_corrct_list = []
            sudoku_list = []
    

        

            for majority_voted, voted_ans_nll in majority_voted_list:

                
                if data_type == 'gsm':
                    is_correct = False
                    if majority_voted is not None:
                        is_correct = majority_voted == now_datapoint_gt
                    else: 
                        is_correct = False
                    is_corrct_list.append(is_correct)

                    # if is_correct_gsm:
                    #     result_list.append(1)
                    # else:
                    #     result_list.append(0)

                elif data_type == 'math':
                    is_correct = False
                    if majority_voted is not None:
                        is_correct = is_equiv(majority_voted, now_datapoint_gt)
                    is_corrct_list.append(is_correct)

                    # if is_correct_math:
                    #     result_list.append(1)
                    # else:
                    #     result_list.append(0)

                elif data_type == 'countdown':
                    is_correct = evaluate_countdown(majority_voted, now_datapoint_gt)
                    is_corrct_list.append(is_correct)

                    # if is_correct:
                    #     result_list.append(1)
                    # else:
                    #     result_list.append(0)

                elif data_type == 'sudoku':
                    numerator_count, denominator_count = evaluate_sudoku_answers(majority_voted, now_question, now_datapoint_gt)
                    sudoku_list.append((numerator_count, denominator_count))

                elif data_type == 'arcc':
                    is_correct = False
                    if majority_voted is not None:
                        is_correct = is_equiv(majority_voted, now_datapoint_gt)
                    is_corrct_list.append(is_correct)


                elif data_type == 'truthfulqa':
                    is_correct = False
                    if majority_voted is not None:
                        is_correct = is_equiv(majority_voted, now_datapoint_gt)
                    is_corrct_list.append(is_correct)

                elif data_type == 'hellaswag':
                    is_correct = False
                    if majority_voted is not None:
                        is_correct = is_equiv(majority_voted, now_datapoint_gt)
                    is_corrct_list.append(is_correct)
                
                elif data_type == 'mmlu':
                    is_correct = False
                    if majority_voted is not None:
                        is_correct = is_equiv(majority_voted, now_datapoint_gt)
                    is_corrct_list.append(is_correct)

            # print(is_corrct_list)


            if data_type in ['gsm', 'math', 'countdown', 'arcc', 'truthfulqa', 'hellaswag', 'mmlu']:
                # print(f'{num} | {now_extracted_ans_list} | {majority_voted_list} | {now_datapoint_gt}')
                if True in is_corrct_list: result_list.append(1)
                else: result_list.append(0)
            elif data_type in ['sudoku']:
                compare_tuples_list = [(numerator_count/denominator_count, numerator_count, denominator_count) for numerator_count, denominator_count in sudoku_list]
                # print(num, compare_tuples_list)
                max_tuple = max(compare_tuples_list, key=lambda x: x[0]) # choose best among tied
                result_list.append((max_tuple[1], max_tuple[2]))
            
            if is_tied: 
                result_tie_list.append(1)
            else:
                result_tie_list.append(0)

        
        # print(f'decoding: {paths}')
        print('-'*30)
        print(f'select_strategy: {select_strategy} | vote_rule: {vote_rule}')

        print(f'majority vote samples count: {len(paths)}')
        if data_type in ['gsm', 'math', 'countdown', 'arcc', 'truthfulqa', 'hellaswag', 'mmlu']:
            print(f'data_type: {data_type}')
            print(f'{(sum(result_list) / len(result_list))*100:.2f}%')
            print(f'{(sum(result_tie_list) / len(result_tie_list))*100:.2f}%')
            # print(f'{sum(distance_list) / len(distance_list) if len(distance_list) != 0 else None}')
            print('-'*30)
        elif data_type in ['sudoku']:
            print(f'data_type: {data_type}')
            all_acc = sum([numerator for numerator, denominator in result_list]) / sum([denominator for numerator, denominator in result_list])
            print(f'{all_acc*100:.2f}%')
            print(f'{(sum(result_tie_list) / len(result_tie_list))*100:.2f}%')
            print('-'*30)

        print(f'nll_list_len: {len(nll_list)}')
        print(f'nll_list_mean: {sum(nll_list) / len(nll_list):.2f}')


        
        
    if data_type == 'gsm': comparator = None 
    elif data_type == 'math' or data_type == 'arcc' or data_type == 'truthfulqa': comparator = lambda p,g: is_equiv(p,g) 
    elif data_type == 'countdown': comparator = lambda p,g: evaluate_countdown(p,g)

    if save_BOLT_json:
        BOLT_json["metrics"] = {
        "wall_time": "sum all wall_time of BOLT samples",
        "total_processed": base_data["metrics"]["total_processed"]
        }
        BOLT_json["model_path"] = base_data["model_path"]
        BOLT_json["checkpoint_path"] = base_data["checkpoint_path"]
        BOLT_json["gen_length"] = base_data["gen_length"] 
        BOLT_json["diffusion_steps"] = "sum all diffusion_steps of BOLT samples"
        BOLT_json["block_length"] = "Used block_lengths of BOLT samples"
        BOLT_json["total_latency"] = "sum all wall_time of BOLT samples"
        BOLT_json["early_ban_steps"] = "Not used for BOLT"

        candidate_folder_name = folder_path.split('/')[-1]
        candidates_count = len(paths)
        BOLT_folder_path = "Z_eval_result_folder_BOLT"  
        if not os.path.exists(BOLT_folder_path): os.makedirs(BOLT_folder_path)
        from datetime import datetime
        now = datetime.now().strftime("%Y%m%d_%H:%M:%S")
        BOLT_filename = f'{now}_BOLT_{candidates_count}_{data_type}_{candidate_folder_name}_generations.json'
        with open(os.path.join(BOLT_folder_path, BOLT_filename), "w", encoding="utf-8") as f: json.dump(BOLT_json, f, indent=2, ensure_ascii=False)


    print(f'BOLT json save: {save_BOLT_json}')

    
    ###########################################################################################
    # ÌååÎûÄÏÉâ Ïù¥ÎØ∏ÏßÄ ÎßåÎì§Í∏∞
    # make_answer_grid_from_tuples_3(extracted_list_for_all_datapoints,
    #                          majvoted_list_for_all_datapoints,
    #                          gt_list_for_all_datapoints,
    #                          savepath='answer_grid_222.png',
    #                          comparator=comparator,
    #                          n=1319)
    # make_answer_grid_horizontal(
    #     extracted_list_for_all_datapoints, majvoted_list_for_all_datapoints, gt_list_for_all_datapoints,
    #     ylabels=("8","16","32","64","128","256","majvote","GT"),
    #     savepath="grid_horizontal.pdf", show=True
    # )
    # make_answer_grid_horizontal(
    #     extracted_list_for_all_datapoints, majvoted_list_for_all_datapoints, gt_list_for_all_datapoints,
    #     ylabels=("8","16","32","64","128","256","majvote","GT"),
    #     savepath="grid_horizontal.png", show=True
    # )
    ###########################################################################################

    ###########################################################################################
    # # csv ÌååÏùº ÎßåÎì§Í∏∞: intermediate stepsÍ∞Ä ÏóÜÎäî jsonÏù¥ Î™®Ïù∏ Ìè¥ÎçîÏùò Í≤ΩÏö∞ 
    # import pandas as pd
    # df = build_correct_blocks_table(
    # extracted_list_for_all_datapoints,
    # gt_list_for_all_datapoints,
    # block_labels=("8","16","32","64","128","256"),
    #     # comparator=lambda p,g: is_equiv(p,g)  # math/countdownÏù¥Î©¥ Ï†ÑÎã¨
    # )
    # print(df.head(5))
    # mask = df['correct_blocks'].notna() & df['correct_blocks'].str.strip().ne('‚Äî') & df['correct_blocks'].str.strip().ne('')
    # pct = mask.mean() * 100
    # print(pct)
    # # CSVÎ°ú Ï†ÄÏû•
    # df.to_csv("correct_blocks_per_datapoint_gsm8k.csv", index=False, encoding="utf-8")
    # # csv ÌååÏùº ÎßåÎì§Í∏∞: intermediate stepsÍ∞Ä ÏûàÎäî jsonÏù¥ Î™®Ïù∏ Ìè¥ÎçîÏùò Í≤ΩÏö∞ 
    # df = build_correct_blocks_table_tokens(
    # extracted_list_for_all_datapoints,   # (N, 6) with items like (pred, score)
    # gt_list_for_all_datapoints,          # (N,) -> pred or None
    # token_nl_list_for_all_datapoints,    # (N,) -> (list of NL answers, list of NL tokens)
    # block_labels=("8","16","32","64","128","256"),
    # start=0, n=None, indices=None,
    # comparator=None,                     # Ïòà: mathÎ©¥ lambda p,g: is_equiv(p,g)
    # none_token="None"                    # NoneÏùÑ Ïñ¥ÎñªÍ≤å ÌëúÍ∏∞Ìï†ÏßÄ
    # )
    # print(df.head(5))
    # df.to_csv(f"correct_blocks_per_datapoint_{data_type}_tokens.csv", index=False, encoding="utf-8")
    ###########################################################################################
